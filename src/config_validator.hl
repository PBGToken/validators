spending config_validator

import { AssetGroup } from AssetGroupModule
import { 
    BurnFeeConfig, 
    Config, 
    ConfigState, 
    GovernanceConfig, 
    ManagementFeeConfig,
    MintFeeConfig,
    SuccessFeeConfig,
    signed_by_agent, 
    witnessed_by_governance, 
    witnessed_by_oracle,
    INITIAL_PRICE
} from ConfigModule
import { Portfolio } from PortfolioModule
import { tx } from ScriptContext
import { Supply } from SupplyModule
import Tokens

const MIN_FEE_UPPER_LIMIT = (100_000_000/INITIAL_PRICE).ceil() // equivalent value of 100 ADA (i.e. 1 token at initial price)
const MANAGEMENT_FEE_PERIOD_UPPER_LIMIT = 366*Duration::DAY
const SUCCESS_FEE_PERIOD_UPPER_LIMIT = 3660*Duration::DAY
const MAX_PRICE_AGE_UPPER_LIMIT = 366*Duration::DAY // if no oracle is available, changing the max price age to something very large is the only way of getting mony out of the vault through burning
const UPDATE_DELAY_UPPER_LIMIT = 366*Duration::DAY
const MAX_SUPPLY_UPPER_LIMIT = (1_000_000_000_000_000_000_000/INITIAL_PRICE).ceil() // 1000 Trillion ADA
const MIN_REIMBURSEMENT_UPPER_LIMIT = (100_000_000/INITIAL_PRICE).ceil() // equivalent value of 100 ADA (i.e. 1 token at initial price)

func main(_: Config, _) -> Bool {
    (config0: Config, config1: Config) = Config::find_thread();
    
    old_state = config0.state;
    new_state = config1.state;

    assert(tx.time_range.end - tx.time_range.start < Duration::DAY, "validity time range too large");
    (old_state, new_state).switch{
        (Idle, changing: Changing) => {
            assert(witnessed_by_governance(), "not witnessed by governance");
            assert(config1 == config0.copy(state: new_state), "bad new config data");
            assert(changing.proposal_timestamp >= tx.time_range.end, "proposal time not set to after tx validity time range");
            assert(changing.proposal_timestamp < tx.time_range.end + Duration::DAY, "proposal time set too far in the future"); // upper bound
            changing.proposal.switch{
                AddingAssetClass{asset_class} => {
                    portfolio = Portfolio::find_ref();
                    DoesNotExist{expected_asset_class} = portfolio.get_reduction_result();

                    assert(asset_class == expected_asset_class, "asset class doesn't correspond with asset class in portfolio reduction")
                },
                RemovingAssetClass{asset_class} => {
                    portfolio = Portfolio::find_ref();
                    Exists{expected_asset_class, actually_exists} = portfolio.get_reduction_result();
                    
                    assert(actually_exists, "the asset class to be removed doesn't exist");
                    assert(asset_class == expected_asset_class, "asset class doesn't correspond with asset class in portfolio reduction")
                },
                UpdatingSuccessFee{period, benchmark, fee} => {
                    supply = Supply::find_ref();
        
                    assert(period > Duration::new(0), "new period not larger than 0");
                    assert(period < SUCCESS_FEE_PERIOD_UPPER_LIMIT, "new period not smaller than upper limit");
                    assert(tx.redeemers.any((key: ScriptPurpose, _) -> {
                        key == ScriptPurpose::new_rewarding(StakingCredential::new_hash(StakingHash::new_validator(benchmark)))
                    }), "not witnessed by new benchmark");
                    assert(fee.is_valid(), "new success fee isn't valid");
                    assert((supply.period_end() - tx.time_range.end) >= (config0.governance.update_delay + Duration::DAY), "too late (you've missed the window of opportunity to change the success fee config this period)");
                    assert((supply.period_end() - tx.time_range.start) < config0.governance.update_delay*2, "too soon")
                },
                IncreasingMaxTokenSupply{Nmax} => {
                    assert(Nmax > config0.token.max_supply, "new max token supply is larger than previous max token supply");
                    assert(Nmax < MAX_SUPPLY_UPPER_LIMIT, "new max token supply out of bounds")
                },
                ChangingAgent{new_agent} => {
                    assert(signed_by_agent(new_agent), "not signed by new agent")
                },
                ChangingOracle{new_oracle} => {
                    assert(witnessed_by_oracle(new_oracle), "not witnessed by new oracle delegate")
                },
                ChangingGovernance{new_governance, tau_gov} => {
                    assert(witnessed_by_governance(new_governance), "not witnessed by new gov delegate");
                    assert(tau_gov > Duration::new(0), "new gov delay isn't larger than 0");
                    assert(tau_gov < UPDATE_DELAY_UPPER_LIMIT, "new gov delay is out of bounds")
                },
                ChangingMintFee{relative, d_min} => {
                    assert(relative >= 0.0, "new relative mint fee is negative");
                    assert(relative < 0.1, "new relative mint fee is too large"); // 10%
                    assert(d_min >= 0, "new min mint fee is negative");
                    assert(d_min < MIN_FEE_UPPER_LIMIT, "new min mint fee is out of bounds")
                },
                ChangingBurnFee{relative, d_min} => {
                    assert(relative >= 0.0, "new relative burn fee is negative");
                    assert(relative < 0.1, "new relative burn is too large"); // 10%
                    assert(d_min >= 0, "new min burn fee is negative");
                    assert(d_min < MIN_FEE_UPPER_LIMIT, "new min burn fee is out of bounds")
                },
                ChangingManagementFee{relative, tau_mgmt} => {
                    assert(relative >= 0.0, "new relative management is negative");
                    assert(relative < 0.1, "new relative management is too large"); // 10%
                    assert(tau_mgmt > Duration::new(0), "new management fee period isn't larger than 0");
                    assert(tau_mgmt < MANAGEMENT_FEE_PERIOD_UPPER_LIMIT, "new management fee period is out of bounds")
                },
                ChangingMaxPriceAge{tau_p} => {
                    assert(tau_p > Duration::new(0), "new tau_p not larger than 0");
                    assert(tau_p < MAX_PRICE_AGE_UPPER_LIMIT, "new tau_p out of bounds")
                },
                ChangingMinReimbursement{min_reimbursement} => {
                    assert(min_reimbursement >= 0, "new min_reimbursement is negative");
                    assert(min_reimbursement < MIN_REIMBURSEMENT_UPPER_LIMIT, "new min_reimbursement out of bounds")
                },
                ChangingMetadata{hash} => {
                    assert(hash.length == 32, "new metadata hash not 32 bytes long")
                }
            }   
        },
        (changing: Changing, Idle) => {
            assert(tx.time_range.start >= changing.proposal_timestamp + config0.governance.update_delay, "update delay hasn't passed");
            assert(signed_by_agent(config1.agent), "not signed by new agent");
            changing.proposal.switch{
                AddingAssetClass{asset_class} => {
                    (group0, group1) = AssetGroup::find_single_thread();

                    assert(!group0.has_asset(asset_class), "asset class exists in group input"); // TODO: is this line redundant?
                    assert(group1.has_asset(asset_class), "asset class doesn't exist in group output");
                    assert(config1 == config0.copy(state: ConfigState::Idle), "invalid datum change")
                },
                RemovingAssetClass{asset_class} => {
                    (group0, group1) = AssetGroup::find_single_thread();

                    assert(group0.has_asset(asset_class), "asset class doesn't exist in group input");
                    assert(!group1.has_asset(asset_class), "asset class exists in group output");
                    assert(config1 == config0.copy(state: ConfigState::Idle), "invalid datum change")
                },
                UpdatingSuccessFee{_, benchmark, fee} => {
                    supply = Supply::find_input();

                    // reimbursement token minting assures the supply_validator witnesses the tx, 
                    //  which, because the config UTxO is being spent, in turn assures the period is copied into the correct field in the supply datum

                    assert(tx.minted.get_safe(Tokens::reimbursement(supply.period_id())) == 1, "not exactly one reimbursement token minted");
                    assert(config1 == config0.copy(
                        fees: config0.fees.copy(
                            success_fee: config0.fees.success_fee.copy(   
                                fee: fee,
                                benchmark: benchmark
                            )
                        ),
                        state: ConfigState::Idle
                    ), "invalid datum change")
                },
                IncreasingMaxTokenSupply{Nmax} => {
                    assert(config1 == config0.copy(
                        token: config0.token.copy(
                            max_supply: Nmax
                        ),
                        state: ConfigState::Idle
                    ), "invalid datum change")
                },
                ChangingAgent{new_agent} => {
                    assert(config1 == config0.copy(
                        agent: new_agent,
                        state: ConfigState::Idle
                    ), "invalid datum change")
                },
                ChangingOracle{new_oracle} => {
                    assert(config1 == config0.copy(
                        oracle: new_oracle,
                        state: ConfigState::Idle
                    ), "invalid datum change")
                },
                ChangingGovernance{gov, tau_gov} => {
                    assert(config1 == config0.copy(
                        governance: GovernanceConfig{
                            delegate: gov,
                            update_delay: tau_gov
                        },
                        state: ConfigState::Idle
                    ), "invalid datum change")
                },
                ChangingMintFee{phi, d_min} => {
                    assert(config1 == config0.copy(
                        fees: config0.fees.copy(
                            mint_fee: MintFeeConfig{
                                relative: phi,
                                minimum: d_min
                            }
                        ),
                        state: ConfigState::Idle
                    ), "invalid datum change")
                },
                ChangingBurnFee{phi, d_min} => {
                    assert(config1 == config0.copy(
                        fees: config0.fees.copy(
                            burn_fee: BurnFeeConfig{
                                relative: phi,
                                minimum: d_min
                            }
                        ),
                        state: ConfigState::Idle
                    ), "invalid datum change")
                },
                ChangingManagementFee{phi, tau_mgmt} => {
                    assert(config1 == config0.copy(
                        fees: config0.fees.copy(
                            management_fee: ManagementFeeConfig{
                                relative: phi,
                                period: tau_mgmt
                            }
                        ),
                        state: ConfigState::Idle
                    ), "invalid datum change")
                },
                ChangingMaxPriceAge{tau_p} => {
                    assert(config1 == config0.copy(
                        token: config0.token.copy(
                            max_price_age: tau_p
                        ),
                        state: ConfigState::Idle
                    ), "invalid datum change")
                },
                ChangingMinReimbursement{min_reimbursement} => {
                    assert(config1 == config0.copy(
                        fees: config0.fees.copy(
                            success_fee: config0.fees.success_fee.copy(
                                min_reimbursement: min_reimbursement
                            )
                        ),
                        state: ConfigState::Idle
                    ), "invalid datum change")
                },
                ChangingMetadata => {
                    assert(tx.inputs.any((input: TxInput) -> {
                        input.value.get_safe(Tokens::metadata) == 1
                    }), "metadata utxo not spent");
                    assert(config1 == config0.copy(
                        state: ConfigState::Idle
                    ), "invalid datum change")
                }
            }
        },
        else => error("illegal state change")
    };
    true
}