minting pbg_policy

/**
 * Role: scarcity of PBG tokens and make sure success fee is distributed
 *
 * Note: most of the below validation rules have been moved to the pbg_counter validator
 * General validation rules:
 *   * tx is signed by master key
 *   * price is recent
 *   * pbg counter is consumed

 * Mint validation rules:
 *   * minted amount is positive
 *   * equivalent lovelace is sent to vault
 *   * lovelace counter is consumed
 *
 * Burn validation rules:
 *   * minted amount is negative
 *   * equivalent lovelace is taken out of vault
 *   * lovelace counter is consumed
 *
 * MintManagementFee validation rules:
 *   * minted amount is positive
 *   * management fee cycle token is consumed
 *   * minted amount doesn't surpass management fee
 *
 * MintSuccessFee validation rules:
 *   * minted amount is positive
 *   * success fee cycle token must be consumed
 *   * minted amount cannot exceed success fee calculation
 *   * minted amount is sent to distributor address with correct datum
 */

import {
    PBG_COUNTER_ASSETCLASS
} from "./common/constants"

func pbg_counter_is_consumed(tx: Tx) -> Bool {
    tx.inputs.any((input: TxInput) -> {
        input.output.value.get_safe(PBG_COUNTER_ASSETCLASS) == 1
    })
}

func main(_, ctx: ScriptContext) -> Bool {
    tx: Tx = ctx.tx;

    pbg_counter_is_consumed(tx).trace("pbg counter consumed: ")
}