spending burn_order_validator

import Addresses
import { AssetPtr } from AssetPtrModule
import { BurnOrder } from BurnOrderModule
import { Config, deduct_burn_fee, signed_by_agent } from ConfigModule
import { Price } from PriceModule
import { tx } from ScriptContext
import { Supply } from SupplyModule
import TokenNames
import Tokens
import { Voucher } from VoucherModule

enum Redeemer {
    Cancel
    Fulfill {
        ptrs: []AssetPtr
    }
}

// can't be negative
func calc_provisional_success_fee(
    price: Price,
    diff: Value, 
    n_burn: Int
) -> Int {
    config = Config::find_ref();
    supply = Supply::find_input();

    benchmark_price = price.relative_to_benchmark();
    p0 = supply.success_fee.start_price;

    vouchers: Map[ByteArray]Int = diff.get_policy(Tokens::policy).filter((token_name: ByteArray, _) -> {
        TokenNames::has_voucher_nft_prefix(token_name)
    });

    (delta_vouchers, n_voucher_tokens) = vouchers.fold2((delta_vouchers: Int, n_voucher_tokens: Int, token_name: ByteArray, qty: Int) -> {
        voucher_id = TokenNames::parse_voucher_nft(token_name).unwrap();

        assert(qty >= 1, "can't be negative");

        voucher_ref_token = Tokens::voucher_ref_token(voucher_id);
        voucher_ref_input = tx.inputs.find((input: TxInput) -> {
            input.address == Addresses::voucher
            && input.value.get_safe(voucher_ref_token) == 1
        });

        voucher = voucher_ref_input.datum.inline.as[Voucher];

        alpha_voucher = (benchmark_price/voucher.price).to_real();
        phi = config.fees.success_fee.fee.apply(alpha_voucher);
        delta_voucher = (voucher.tokens*(phi/alpha_voucher)).floor();

        (
            delta_vouchers + delta_voucher, 
            n_voucher_tokens + voucher.tokens
        )
    }, 0, 0);

    alpha = (benchmark_price/p0).to_real();
    
    (delta_vouchers + ((n_burn - n_voucher_tokens)*config.fees.success_fee.fee.apply(alpha)/alpha).floor()).bound_min(0)
}

func main(order: BurnOrder, redeemer: Redeemer) -> Bool {
    redeemer.switch{
        Cancel => tx.is_approved_by(order.return_address.credential),
        Fulfill{ptrs} => {
            price = Price::find_ref();

            n_burn = order.burned_tokens();

            delta_alpha = calc_provisional_success_fee(
                price,
                order.diff(),
                n_burn
            );

            n_expected = deduct_burn_fee(n_burn - delta_alpha);
            n_actual = (order.value_lovelace(ptrs)/price.value).floor();

            signed_by_agent().trace_if_false("not signed by agent")
            && price.is_not_expired(order.price_expiry()).trace_if_false("price expired")
            && (n_actual >= n_expected).trace_if_false("not enough value returned (as required by contract), expected the equivalent of at least " + n_expected.show() + " tokens, got the equivalent of " + n_actual.show() + " tokens")
            && order.returned_enough(ptrs).trace_if_false("not enough value returned (as requested by user)")
        }
    }
}