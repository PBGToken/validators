spending vote_validator

import {
    Keys
} from "./common/Keys.hl"

/**
 * Role: make sure votes can only be burned
 *
 * Validation rules:
 *   * tx is signed by master key
 *   * inputs have only one marker
 *   * all vote intent tokens in inputs must be burned
 */ 

func get_current_marker(current_input: TxInput) -> AssetClass {
    non_lovelace_assets: Map[MintingPolicyHash]Map[ByteArray]Int = current_input.output.value.get_assets().to_map();
    assert(non_lovelace_assets.tail.is_empty() && non_lovelace_assets.head_value.head_value == 1, "unexpected tokens");

    AssetClass::new(non_lovelace_assets.head_key, non_lovelace_assets.head_value.head_key)
}

func main(_, _, ctx: ScriptContext) -> Bool {
    tx: Tx = ctx.tx;
    ref_inputs: []TxInput = tx.ref_inputs;
    keys = Keys::from_inputs(ref_inputs);

    asset_class: AssetClass = get_current_marker(ctx.get_current_input());

    tokens_in: Int = tx.inputs.fold((prev: Int, input: TxInput) -> Int {
        input.output.value.get_safe(asset_class) + prev
    }, 0);

    keys.is_signed_by_master_key(tx)
    && tx.minted.get(asset_class) == -tokens_in
}
