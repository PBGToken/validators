mixed fund_policy

import Addresses
import { 
    AssetsConfig,
    BurnFeeConfig, 
    Config, 
    ConfigState,
    FeesConfig, 
    GovernanceConfig,
    ManagementFeeConfig,
    MintFeeConfig, 
    SuccessFeeConfig,
    TokenConfig
} from ConfigModule
import { Metadata } from MetadataModule
import { Portfolio, PortfolioReduction, witnessed_by_portfolio } from PortfolioModule
import { Price } from PriceModule
import { tx } from ScriptContext
import { SuccessFee, SuccessFeeStep } from SuccessFeeModule
import { Supply, SuccessFeeState, witnessed_by_supply } from SupplyModule
import TokenNames
import Tokens

const SEED_ID: TxOutputId = TxOutputId::new(TxId::new(#), 0)
const INITIAL_AGENT: PubKeyHash = PubKeyHash::new(#)
const INITIAL_TICK: Int = 0
const INITIAL_SUCCESS_FEE: SuccessFee = SuccessFee{
    steps: []SuccessFeeStep{
        c0: 0,
        SuccessFeeStep{c: 0.3, sigma: 1.05}
    }
}

func validate_minted_tokens() -> Bool {
    tokens = Tokens::get_minted();
    
    tokens.length == 5
    && tokens.get(TokenNames::metadata) == 1
    && tokens.get(TokenNames::config) == 1
    && tokens.get(TokenNames::portfolio) == 1
    && tokens.get(TokenNames::price) == 1
    && tokens.get(TokenNames::supply) == 1
}

func validate_initial_metadata() -> Bool {
    metadata = Metadata::find_output();

    metadata == Metadata{
        name:        "PBG Token",
        description: "The first DVP",
        ticker:      "PBG",
        url:         "https://pbg.io",
        decimals:    6,
        logo:        "https://token.pbg.io/logo.png"
    }
}

func validate_initial_config() -> Bool {
    config = Config::find_output();

    tx.is_signed_by(INITIAL_AGENT)
    && INITIAL_SUCCESS_FEE.is_valid()
    && config == Config{
        agent: INITIAL_AGENT,
        fees: FeesConfig{
            mint_fee: MintFeeConfig{
                relative: 0.005, // 0.5%
                minimum:  20_000 // 0.02 tokens, equivalent to 2 ADA
            },
            burn_fee: BurnFeeConfig{
                relative: 0.005, // 0.5%
                minimum:  20_000 // 0.02 tokens, equivalent to 2 ADA
            },
            management_fee: ManagementFeeConfig{
                relative: 0.00011, // 0.011% daily, about 4% annually
                period:   Duration::DAY
            },
            success_fee_config: SuccessFeeConfig{
                fee:       INITIAL_SUCCESS_FEE,
                benchmark: Scripts::benchmark_delegate
            }
        },
        tokens: TokenConfig{
            max_supply:    100_000_000_000,
            max_price_age: Duration::DAY
        },
        oracle: Scripts::oracle_delegate,
        assets: AssetsConfig{
            max_group_size: 3
        },
        governance: GovernanceConfig{
            update_delay: Duration::WEEK*2,
            delegate:     Scripts::governance_delegate
        },
        state: ConfigState::None
    }
}

func validate_initial_portfolio() -> Bool {
    portfolio = Portfolio::find_output();

    portfolio == Portfolio{
        n_groups:  0,
        reduction: PortfolioReduction::Idle
    }
}

func validate_initial_price() -> Bool {
    price = Price::find_output();

    price == Price{
        value:     Config::INITIAL_PRICE,
        timestamp: Time::new(0)
    }
}

func validate_initial_supply() -> Bool {
    supply = Supply::find_output();

    supply == Supply{
        tick:       INITIAL_TICK,
        n_tokens:   0,
        n_vouchers: 0,
        n_lovelace: 0,
        management_fee_timestamp: Time::new(0),
        success_fee: SuccessFeeState{
            period_id:   0,
            start_time:  Time::new(0),
            period:      Duration::WEEK*2, // not yet 1 year, so we can test the success fee for a few periods
            start_price: Config::INITIAL_PRICE
        }
    }
}

func validate_initialization() -> Bool {
    validate_minted_tokens()
    && validate_initial_metadata()
    && validate_initial_config()
    && validate_initial_portfolio()
    && validate_initial_price()
    && validate_initial_supply()
}

func validate_vault_spending() -> Bool {
    witnessed_by_supply()
}

func validate_mint_or_burn_asset_groups() -> Bool {
    witnessed_by_portfolio()
}

func validate_mint_or_burn_dvp_tokens_vouchers_or_reimbursement() -> Bool {
    witnessed_by_supply()
}

func main(args: MixedArgs) -> Bool {
    args.switch{
        Spending => {
            validate_vault_spending()
        },
        Other => {
            if (tx.inputs.any((input: TxInput) -> {input.output_id == SEED_ID})) {
                validate_initialization()
            } else if (Tokens::get_minted().any_key(TokenNames::has_assets_prefix)) {
                validate_mint_or_burn_asset_groups()
            } else {
                validate_mint_or_burn_dvp_tokens_vouchers_or_reimbursement()
            }
        }
    }   
}