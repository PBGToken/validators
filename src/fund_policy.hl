mixed fund_policy

import Addresses
import {
    INITIAL_PRICE,
    BurnFeeConfig, 
    Config, 
    ConfigState,
    FeesConfig, 
    GovernanceConfig,
    ManagementFeeConfig,
    MintFeeConfig, 
    SuccessFeeConfig,
    TokenConfig
} from ConfigModule
import { Metadata } from MetadataModule
import { Portfolio, PortfolioReduction, witnessed_by_portfolio } from PortfolioModule
import { Price } from PriceModule
import { tx } from ScriptContext
import { SuccessFee, SuccessFeeStep } from SuccessFeeModule
import { Supply, SuccessFeeState, witnessed_by_supply } from SupplyModule
import TokenNames
import Tokens

const SEED_ID: TxOutputId = TxOutputId::new(TxId::new(#), 0)
const INITIAL_AGENT: PubKeyHash = PubKeyHash::new(#)
const INITIAL_TICK: Int = 0
const INITIAL_SUCCESS_FEE: SuccessFee = SuccessFee{
    c0: 0.0,
    steps: []SuccessFeeStep{
        SuccessFeeStep{c: 0.3, sigma: 1.05}
    }
}

func validate_minted_tokens() -> () {
    tokens = Tokens::get_minted();
    
    assert(tokens.length == 5, "not precisely 5 tokens minted");
    assert(tokens.get(TokenNames::metadata) == 1, "metadata token not minted");
    assert(tokens.get(TokenNames::config) == 1, "config token not minted");
    assert(tokens.get(TokenNames::portfolio) == 1, "portfolio token not minted");
    assert(tokens.get(TokenNames::price) == 1, "price token not minted");
    assert(tokens.get(TokenNames::supply) == 1, "supply token not minted")
}

func validate_initial_metadata() -> () {
    metadata = Metadata::find_output();

    assert(metadata.name == "PBG Token", "wrong metadata name");
    assert(metadata.description == "The first DVP", "wrong metadata description");
    assert(metadata.ticker == "PBG", "wrong metadata ticker");
    assert(metadata.url == "https://pbg.io", "wrong metadata url");
    assert(metadata.decimals == 6, "wrong metadata decimals");
    assert(metadata.logo == "https://token.pbg.io/logo.png", "wrong metadata logo uri")
}

func validate_initial_config() -> () {
    config = Config::find_output();

    assert(tx.is_signed_by(INITIAL_AGENT), "not signed by agent");
    assert(INITIAL_SUCCESS_FEE.is_valid(), "initial success fee coefs aren't valid");
    assert(config == Config{
        agent: INITIAL_AGENT,
        fees: FeesConfig{
            mint_fee: MintFeeConfig{
                relative: 0.005, // 0.5%
                minimum:  20_000 // 0.02 tokens, equivalent to 2 ADA
            },
            burn_fee: BurnFeeConfig{
                relative: 0.005, // 0.5%
                minimum:  20_000 // 0.02 tokens, equivalent to 2 ADA
            },
            management_fee: ManagementFeeConfig{
                relative: 0.0001, // 0.01% daily, 3.65% annually
                period:   Duration::DAY
            },
            success_fee: SuccessFeeConfig{
                fee:       INITIAL_SUCCESS_FEE,
                benchmark: Scripts::benchmark_delegate,
                min_reimbursement: 20_000 // 0.02 tokens, equivalent to 2 ADA
            }
        },
        token: TokenConfig{
            max_supply:    100_000_000_000,
            max_price_age: Duration::DAY
        },
        oracle: Scripts::oracle_delegate,
        governance: GovernanceConfig{
            update_delay: Duration::WEEK*2,
            delegate:     Scripts::governance_delegate
        },
        state: ConfigState::Idle
    }, "unexpected initial config datum")
}

func validate_initial_portfolio() -> () {
    portfolio = Portfolio::find_output();

    assert(portfolio == Portfolio{
        n_groups:  0,
        reduction: PortfolioReduction::Idle
    }, "unexpected initial portfolio datum")
}

func validate_initial_price() -> () {
    price = Price::find_output();

    assert(price == Price{
        value:     INITIAL_PRICE,
        timestamp: Time::new(0)
    }, "unexpected initial price datum")
}

func validate_initial_supply() -> () {
    supply = Supply::find_output();

    assert(supply == Supply{
        tick:       INITIAL_TICK,
        n_tokens:   0,
        n_vouchers: 0,
        last_voucher_id: 0,
        n_lovelace: 0,
        management_fee_timestamp: Time::new(0),
        success_fee: SuccessFeeState{
            period_id:   0,
            start_time:  Time::new(0),
            period:      Duration::WEEK*2, // TODO: not yet 1 year, so we can test the success fee for a few periods
            start_price: INITIAL_PRICE
        }
    }, "unexpected initial supply datum")
}

func validate_initialization() -> () {
    validate_minted_tokens();
    validate_initial_metadata();
    validate_initial_config();
    validate_initial_portfolio();
    validate_initial_price();
    validate_initial_supply()
}

func validate_vault_spending() -> () {
    assert(witnessed_by_supply(), "vault spending not witnessed by supply spending")
}

func validate_mint_or_burn_asset_groups() -> () {
    assert(witnessed_by_portfolio(), "mint/burn of asset groups not witnessed by portfolio spending")
}

func validate_mint_or_burn_dvp_tokens_vouchers_or_reimbursement() -> () {
    assert(witnessed_by_supply(), "mint/burn of other tokens not witnessed by supply spending")
}

func main(args: MixedArgs) -> Bool {
    args.switch{
        Spending => {
            validate_vault_spending()
        },
        Other => {
            tokens = Tokens::get_minted();

            if (tokens.get_safe(TokenNames::dvp_token) != Option[Int]::None) {
                // voucher and reimbursement token minting is usually accompanied by DVP token minting
                //  only in case of no success it is possible that a reimbursement token is minted without DVP tokens, that (rare) case is treated below
                validate_mint_or_burn_dvp_tokens_vouchers_or_reimbursement()
            } else if (tokens.any_key(TokenNames::has_assets_prefix)) {
                validate_mint_or_burn_asset_groups()
            } else if (tokens.all((token_name: ByteArray, qty: Int) -> {
                qty == -1 && (TokenNames::has_voucher_ref_prefix(token_name) || TokenNames::has_reimbursement_prefix(token_name))
            })) {
                // there is no risk of this happening before initialization because then burned tokens wouldn't yet exist
                assert(true, "")
            } else if (tokens.any_key(TokenNames::has_reimbursement_prefix)) {
                validate_mint_or_burn_dvp_tokens_vouchers_or_reimbursement()
            } else {
                assert(tx.inputs.any((input: TxInput) -> {input.output_id == SEED_ID}), "UTxO with SEED_ID not spent");
                validate_initialization()
            }
        }
    };
    true  
}