spending mint_order_validator

import { AssetPtr } from AssetPtrModule
import { deduct_mint_fee, signed_by_agent } from ConfigModule
import { MintOrder } from MintOrderModule
import { Price } from PriceModule
import { tx } from ScriptContext
import { Supply } from SupplyModule
import { Voucher } from VoucherModule

enum Redeemer {
    Cancel
    Fulfill {
        ptrs: []AssetPtr
    }
}

func main(order: MintOrder, redeemer: Redeemer) -> Bool {
    redeemer.switch{
        Cancel => {
            assert(tx.is_approved_by(order.return_address.credential), "not approved by owner")
        },
        Fulfill{ptrs} => {
            price = Price::find_ref();
            supply = Supply::find_input();

            n_actual = order.returned_tokens();
            n_expected = deduct_mint_fee(price.convert_lovelace_to_tokens_round_down(order.value_lovelace(ptrs)));

            assert(signed_by_agent(), "not signed by agent");
            assert(price.is_not_expired(order.price_expiry()), "token price too old");
            assert(n_actual >= order.min_tokens, "not enough tokens returned wrt. order");
            assert(n_actual >= n_expected, "not enough tokens returned wrt. contract price, expected min " + n_expected.show() + ", got " + n_actual.show());
            if (supply.is_successful(price.relative_to_benchmark())) {
                voucher_id = order.voucher_id();
                print("created voucher: " + voucher_id.show());
                voucher = Voucher::find_output(voucher_id);

                assert(voucher.return_address == order.return_address, "wrong voucher return address");
                assert(voucher.return_datum == order.return_datum, "wrong voucher datum");
                assert(voucher.tokens == n_expected, "unexpected number of tokens in voucher")
            }
        }
    };
    true
}