spending mint_order_validator

import { AssetPtr } from AssetPtrModule
import { deduct_mint_fee, signed_by_agent } from ConfigModule
import { MintOrder } from MintOrderModule
import { Price } from PriceModule
import { tx } from ScriptContext
import { Supply } from SupplyModule
import { Voucher } from VoucherModule

enum Redeemer {
    Cancel
    Fulfill {
        ptrs: []AssetPtr
    }
}

func main(order: MintOrder, redeemer: Redeemer) -> Bool {
    redeemer.switch{
        Cancel => {
            tx.is_approved_by(order.return_address.credential)
        },
        Fulfill{ptrs} => {
            price = Price::find_ref();
            supply = Supply::find_input();

            n_actual = order.returned_tokens();
            print("actual returned tokens: " + n_actual.show());
            n_expected = deduct_mint_fee((order.value_lovelace(ptrs) / price.value).floor());
            print("expected min returned tokens: " + n_expected.show());

            signed_by_agent().trace_if_false("not signed by agent")
            && price.is_not_expired(order.price_expiry()).trace_if_false("token price too old")
            && (n_actual >= order.min_tokens).trace_if_false("not enough tokens returned wrt. order")
            && (n_actual >= n_expected).trace_if_false("not enough tokens returned wrt. contract price")
            && if (supply.is_successful(price.relative_to_benchmark())) {
                voucher_id = order.voucher_id();
                print("created voucher: " + voucher_id.show());
                voucher = Voucher::find_output(voucher_id);

                (voucher.return_address == order.return_address).trace_if_false("wrong voucher return address")
                && (voucher.return_datum == order.return_datum).trace_if_false("wrong voucher datum")
                && (voucher.tokens >= n_expected).trace_if_false("too few tokens in voucher") // TODO: upper limit?
                && (voucher.price >= price.relative_to_benchmark()).trace_if_false("voucher price too low") // a high price is beneficial for the user, TODO: upper limit?
                && (voucher.period_id == supply.period_id()).trace_if_false("wrong voucher period id")
            } else {
                true
            }
        }
    }
}