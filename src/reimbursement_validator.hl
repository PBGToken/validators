spending reimbursement_validator

import Addresses
import { Config, signed_by_agent } from ConfigModule
import { Reimbursement } from ReimbursementModule
import { tx } from ScriptContext
import TokenNames
import Tokens
import { Voucher } from VoucherModule

/**
 * Counts the number of vouchers burned, and the token amount sent to the vouchers
 * Each voucher is also validated
 * Each spent voucher ref token
 */
func validate_burned_vouchers(reim: Reimbursement, period_id: Int, voucher_output_ptrs: []Int) -> (Int, Int) {
    config = Config::find_ref();
    minted_tokens = Tokens::get_minted();
    main_phi_alpha_ratio = reim.calc_phi_alpha_ratio();

    (n_vouchers_burned, n_tokens_reimbursed, _) = tx.inputs.fold3((n_vouchers_burned: Int, n_tokens_reimbursed: Int, voucher_output_ptrs: []Int, input: TxInput) -> (Int, Int, []Int) {
        if (input.address == Addresses::voucher) {
            id = Tokens::parse_voucher_ref(input);
            ptr = voucher_output_ptrs.head;

            assert(minted_tokens.get(TokenNames::voucher_ref(id)) == -1, "voucher ref not burned");

            voucher = input.datum.inline.as[Voucher];
            voucher_phi_alpha_ratio = reim.calc_phi_alpha_ratio(voucher.price);
            expected_reimbursed_tokens = (voucher.tokens*(main_phi_alpha_ratio - voucher_phi_alpha_ratio)).floor().bound_min(0);

            // though the voucher period id is checked by voucher_validator, voucher period ids and reimbursement ids can be mixed here, as long as all reimbursement period ids are present
            // hence we still need to check the voucher period id here in order to avoid mixing
            assert(voucher.period_id == period_id, "voucher is from other period");

            // the reimbursement is only necessary if it is more than a certain amount of tokens
            if (expected_reimbursed_tokens >= config.fees.success_fee.min_reimbursement) {
                return = voucher.find_return(ptr);

                // avoid token dust attack
                //   for which it is sufficient to check that returned value only contains a DVP policy or ADA
                assert(return.value.to_map().all_keys((mph: MintingPolicyHash) -> {
                    mph == MintingPolicyHash::new(#) // ADA
                    || mph == Tokens::policy
                }), "returned value can only contain DVP tokens"); 
    
                reimbursed_tokens = return.value.get_safe(Tokens::dvp_token);
                
                assert(reimbursed_tokens == expected_reimbursed_tokens, "expected a reimbursement of " + expected_reimbursed_tokens.show() + ", actually reimbursed " + reimbursed_tokens.show());
    
                (
                    n_vouchers_burned + 1,
                    n_tokens_reimbursed + expected_reimbursed_tokens,
                    voucher_output_ptrs.tail
                )
            } else {
                (
                    n_vouchers_burned + 1,
                    n_tokens_reimbursed,
                    voucher_output_ptrs.tail
                )
            }
        } else {
            (n_vouchers_burned, n_tokens_reimbursed, voucher_output_ptrs)
        }
    }, 0, 0, voucher_output_ptrs);

    (n_vouchers_burned, n_tokens_reimbursed)
}

func main(_: Reimbursement, voucher_output_ptrs: []Int) -> Bool {
    (id, reim0, n0) = Reimbursement::find_input();
    
    (n_vouchers_burned, n_tokens_reimbursed) = validate_burned_vouchers(reim0, id, voucher_output_ptrs);

    assert(signed_by_agent(), "not signed by agent");
    if (n_vouchers_burned >= reim0.n_remaining_vouchers) {
        // the reimbursement token itself must be burned, output isn't validated
        assert(Tokens::get_minted().get(TokenNames::reimbursement(id)) == -1, "not exactly one reimbursement token burned")
    } else {
        (reim1, n1) = Reimbursement::find_output(id, 0);

        assert(n1 == n0 - n_tokens_reimbursed, "number of success fee tokens remaining not decremented by the number of reimbursed tokens");
        assert(reim1 == reim0.copy(
            n_remaining_vouchers: reim0.n_remaining_vouchers - n_vouchers_burned
        ), "invalid datum change")
    };
    true
} 