module common_ProgressiveFee

enum ProgressiveStep {
    Step {
        upper: Real
        fee:   Real
    }
    Final {
        fee: Real
    }
}

struct ProgressiveFee {
    steps: []ProgressiveStep

    func calc(step: ProgressiveStep, tail: []ProgressiveStep, x: Real) -> Real {
        if (tail.is_empty()) {
            ProgressiveStep::Final{fee} = step;

            fee*x
        } else {
            ProgressiveStep::Step{upper, fee} = step;

            if (x < upper) {
                x*fee
            } else {
                upper*fee + ProgressiveFee::calc(tail.head, tail.tail, x - upper)
            }
        }
    }

    // result is smaller than x
    func apply(self, x: Real) -> Real {
        ProgressiveFee::calc(self.steps.head, self.steps.tail, x)
    }
}
