module common_Keys

import { PARAMETER_POLICY } from "./constants"
import { Price } from "./Price"
import { PriceFeed } from "./PriceFeed"

const OWNER_KEY_1: PubKeyHash = PubKeyHash::new(#)
const OWNER_KEY_2: PubKeyHash = PubKeyHash::new(#)
const OWNER_KEY_3: PubKeyHash = PubKeyHash::new(#)
const OWNER_KEYS: []PubKeyHash = []PubKeyHash{OWNER_KEY_1, OWNER_KEY_2, OWNER_KEY_3}

const KEYS_PARAMETER_POLICY: MintingPolicyHash = PARAMETER_POLICY
const KEYS_PARAMETER_ASSETCLASS: AssetClass = AssetClass::new(KEYS_PARAMETER_POLICY, (5).show().encode_utf8())
const KEYS_PARAMETER_TOKEN: Value = Value::new(KEYS_PARAMETER_ASSETCLASS, 1)

func calc_running_hash(asset_classes: []AssetClass) -> ByteArray {
    asset_classes.sort((a: AssetClass, b: AssetClass) -> {
        a < b
    }).fold((rh: ByteArray, ac: AssetClass) -> {
        (rh + ac.serialize().blake2b()).blake2b()
    }, #)
}

struct Keys {
    master:       PubKeyHash
    oracles:      []PubKeyHash // the oracle services must also sign some of the transactions
    min_oracles:  Int          // the minimum number of oracle services that must sign the transaction
    running_hash: ByteArray    // running_hash of sorted assets in vault

    func from_inputs(inputs: []TxInput) -> Keys {
        Keys::from_data(
            inputs.find((input: TxInput) -> {
                input.output.value.get_safe(KEYS_PARAMETER_ASSETCLASS) == 1
            }).output.datum.get_inline_data()
        )
    }

    // master key is the same as the hsm key
    func is_signed_by_master_key(self, tx: Tx) -> Bool {
        tx.is_signed_by(self.master)
    }
    
    func is_signed_by_oracles(self, tx: Tx) -> Bool {
        count: Int = self.oracles.fold((prev: Int, oracle: PubKeyHash) -> Int {
            tx.is_signed_by(oracle).to_int() + prev
        }, 0);

        count >= self.min_oracles
    }

    func is_signed_by_majority_of_owners(tx: Tx) -> Bool {
        count: Int = OWNER_KEYS.fold((prev: Int, key: PubKeyHash) -> {
            prev + tx.is_signed_by(key).to_int()
        }, 0);

        count > OWNER_KEYS.length/2
    }
}
