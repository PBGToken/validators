module mPrice

import { Config, price_expiry } from mConfig

struct Price {
    value: Ratio
    timestamp: Time

    func get() -> Price {
        tx = ScriptContext::tx;

        input = ScriptContext::current_script.switch{
            price_validator => tx.get_current_input(),
            else => tx.get_ref_input_at(Addresses::price) // TODO: use the token where the DAG doesn't allow fetching by address
        }

        assert(input.value.get(Tokens::config) == 1, "doesn't contain the config token");

        input.datum.inline.as[Config]
    }

    func is_not_expired(self, expiry: Time = price_expiry()) -> Bool {
        self.timestamp >= expiry
    }

    func relative_to_benchmark(self) -> Ratio {
        config = Config::get();

        config.fees.success_fee.get_benchmark_price(ScriptContext::tx, self.value);
    }
}