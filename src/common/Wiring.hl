module common_Wiring

import  {
    PARAMETER_POLICY
} from "./constants.hl"

import {
    GOVERNANCE_ADDR
} from "./addresses"

const WIRING_PARAMETER_POLICY: MintingPolicyHash = PARAMETER_POLICY
const WIRING_PARAMETER_ASSETCLASS: AssetClass = AssetClass::new(WIRING_PARAMETER_POLICY, (10).show().encode_utf8())
const WIRING_PARAMETER_TOKEN: Value = Value::new(WIRING_PARAMETER_ASSETCLASS, 1)

const CURRENT_VERSION: Int = 0

struct Wiring {
    version:             Int
    pbg_counter:         Address
    vault:               Address
    total_value_reducer: Address
    price_validator:     Address
    management_fee_time_validator: Address
    success_fee_time_validator:    Address
    success_fee_distributor:       Address
    asset_counter_policy: MintingPolicyHash

    func from_ref_inputs(ref_inputs: []TxInput) -> Wiring {
        //print("about to get wiring from ref inputs");
        Wiring::from_data(
            ref_inputs.find((input: TxInput) -> {
                input.output.value.get_safe(WIRING_PARAMETER_ASSETCLASS) == 1
            }).output.datum.get_inline_data()
        )
    }

    func is_same_version(ref_inputs: []TxInput) -> Bool {
        //print("HERE");
        wiring = Wiring::from_ref_inputs(ref_inputs);

        //print("got wiring from ref inputs");

        wiring.version == CURRENT_VERSION
    }
}

func add_wiring(ctx: ContractContext, b: TxBuilder) -> TxBuilder {
    input: TxInput = ctx.network.pick(GOVERNANCE_ADDR, WIRING_PARAMETER_TOKEN).get_singleton();

    b.add_ref_input(input)
}