module TokenNames

const POLICY: MintingPolicyHash =  MintingPolicyHash::from_script_hash(Scripts::fund_policy)

const metadata = Cip67::reference_token_label
const dvp_token = Cip67::fungible_token_label

const assets_prefix: ByteArray = "assets ".encode_utf8()

func assets(group_id: Int) -> ByteArray {
    assets_prefix + group_id.show().encode_utf8()
}

// throws an error if the group id doesn't have the correct format
func parse_series(prefix: ByteArray, token_name: ByteArray) -> Option[Int] {
    if (token_name.starts_with(prefix)) {
        id = token_name.slice(prefix.length, token_name.length);
        Int::parse(id.decode_utf8())
    } else {
        Option[Int]::None
    }
}

func parse_assets(token_name: ByteArray) -> Option[Int] {
    parse_series(assets_prefix, token_name)
}

func has_assets_prefix(token_name: ByteArray) -> Bool {
    token_name.starts_with(assets_prefix)
}

const config: ByteArray = "config".encode_utf8()
const portfolio: ByteArray = "portfolio".encode_utf8()
const price: ByteArray = "price".encode_utf8()

const reimbursement_prefix: ByteArray = "reimbursement ".encode_utf8()

func parse_reimbursement(token_name: ByteArray) -> Option[Int] {
    parse_series(reimbursement_prefix, token_name)
}

func reimbursement(id: Int) -> ByteArray {
    reimbursement_prefix + id.show().encode_utf8()
}

const supply: ByteArray = "supply".encode_utf8()

const voucher_infix = "voucher ".encode_utf8()
const voucher_reference_prefix: ByteArray = Cip67::reference_token_label + voucher_infix
const voucher_user_nft_prefix: ByteArray = Cip67::user_nft_label + voucher_infix

func parse_voucher_reference(token_name: ByteArray) -> Option[Int] {
    parse_series(voucher_reference_prefix, token_name)
}

func parse_voucher_user_nft(token_name: ByteArray) -> Option[Int] {
    parse_series(voucher_user_nft_prefix, token_name)
}

func has_voucher_reference_prefix(token_name: ByteArray) -> Bool {
    token_name.starts_with(voucher_reference_prefix)
}

func has_voucher_user_nft_prefix(token_name: ByteArray) -> Bool {
    token_name.starts_with(voucher_user_nft_prefix)
}

func voucher_reference(id: Int) -> ByteArray {
    voucher_reference_prefix + id.show().encode_utf8()
}

func voucher_user_nft(id: Int) -> ByteArray {
    voucher_user_nft_prefix + id.show().encode_utf8()
}