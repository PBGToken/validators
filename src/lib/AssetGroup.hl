module AssetGroupModule

import Addresses
import { Asset } from AssetModule
import { current_script, get_current_input, tx } from ScriptContext
import TokenNames
import Tokens

struct AssetGroup {
    assets: []Asset

    const MAX_SIZE: Int = 3

    func find_current() -> (Int, AssetGroup) {
        input = get_current_input();

        id = Tokens::parse_assets(input);

        (id, input.datum.inline.as[AssetGroup])
    }

    func find_output(id: Int) -> AssetGroup {
        assets_token = Tokens::assets(id);
    
        output = tx.outputs.find((output: TxOutput) -> {
            output.address == Addresses::assets
            && Tokens::contains_only(output, assets_token)
        });
    
        output.datum.inline.as_strictly[AssetGroup]
    }

    func find_output_asset(asset_class: AssetClass) -> Asset {
        maybe_asset: Option[Asset] = tx.outputs.fold_lazy((output: TxOutput, next: () -> Option[Asset]) -> {
            if (output.address == Addresses::assets) {
                assert(Tokens::contains_only_any_one_assets(output), "doesn't only contain assets token");

                group = output.datum.inline.as_strictly[AssetGroup];

                
                maybe_asset = group.find_asset(asset_class);

                // TODO: a higher performance way of doing this would be to pass next() as the terminating expression to an inner find_or() function
                maybe_asset.switch{
                    Some => maybe_asset,
                    None => next()
                }
            } else {
                next()
            }
        }, Option[Asset]::None);

        maybe_asset.unwrap()
    }

    func find_input_asset(asset_class: AssetClass) -> Asset {
        maybe_asset: Option[Asset] = tx.inputs.fold_lazy((input: TxInput, next: () -> Option[Asset]) -> {
            if (input.address == Addresses::assets) {
                assert(Tokens::contains_any_one_assets(input), "doesn't only contain assets token");

                group = input.datum.inline.as[AssetGroup];

                maybe_asset = group.find_asset(asset_class);

                // TODO: a higher performance way of doing this would be to pass next() as the terminating expression to an inner find_or() function
                maybe_asset.switch{
                    Some => maybe_asset,
                    None => next()
                }
            } else {
                next()
            }
        }, Option[Asset]::None);

        maybe_asset.unwrap()
    }

    /**
     * Throws an error if more than 1 input is spent from the assets_validator address
     * Throws an error if the assets input contains any other tokens
     */
    func find_single_input() -> (Int, AssetGroup) {
        input = tx.inputs.filter((input: TxInput) -> {
            input.address == Addresses::assets
        }).get_singleton();

        id = Tokens::parse_assets(input);

        (id, input.datum.inline.as[AssetGroup])
    }

    func find_single_thread() -> (AssetGroup, AssetGroup) {
        (id, group0) = AssetGroup::find_single_input();
        group1 = AssetGroup::find_output(id);
        (group0, group1)
    }

    func find_asset(self, asset_class: AssetClass) -> Option[Asset] {
        self.assets.find_safe((asset: Asset) -> {asset.asset_class == asset_class})
    }

    func has_asset(self, asset_class: AssetClass) -> Bool {
        self.assets.any((asset: Asset) -> {asset.asset_class == asset_class})
    }

    func is_empty(self) -> Bool {
        self.assets.length == 0
    }

    func is_not_overfull(self) -> Bool {
        self.assets.length <= AssetGroup::MAX_SIZE
    }

    func nothing_spent() -> Bool {
        tx.inputs.all((input: TxInput) -> Bool {
            input.address != Addresses::assets
        })
    }
}

/**
 * This function is used by the portfolio validator
 */
func search_for_asset_class(asset_class: AssetClass, group_ptrs: []Int, first_id: Int) -> Bool {
    ref_inputs = tx.ref_inputs;

    (_, found) = group_ptrs.fold2((expected_id: Int, found: Bool, ptr: Int) -> (Int, Bool) {
        input = ref_inputs.get(ptr);
        id = Tokens::parse_assets(input);

        assert(input.address == Addresses::assets, "asset group not at correct address");
        assert(id == expected_id, "assets id doesn't match expected id (asset groups not iterated in order)");

        (
            expected_id+1,
            if (found) {
                // no need to loop over the assets in the group
                true
            } else {
                group = input.datum.inline.as[AssetGroup];

                // reuse group.has_asset
                group.has_asset(asset_class)
            }
        )
    }, first_id, false);

    found
}

/**
 * This function is used by the portfolio validator
 */
func sum_total_asset_value(group_ptrs: []Int, first_id: Int) -> (Time, Int) {
    ref_inputs = tx.ref_inputs;

    (_, tp: Option[Time], dV: Int) = group_ptrs.fold3((expected_id: Int, tp: Option[Time], dV: Int, ptr: Int) -> (Int, Option[Time], Int) {
        input = ref_inputs.get(ptr);
        id = Tokens::parse_assets(input);

        assert(input.address == Addresses::assets, "asset group not at correct address");
        assert(id == expected_id, "assets id doesn't match expected id (asset groups not iterated in order)");

        group = input.datum.inline.as[AssetGroup];

        (tp: Option[Time], dV: Int) = group.assets.fold2((tp: Option[Time], dV: Int, asset: Asset) -> {
            (
                tp.switch{
                    None => Option[Time]::Some{asset.price_timestamp},
                    Some{tp_old} => Option[Time]::Some{if (asset.price_timestamp < tp_old) {asset.price_timestamp} else {tp_old}}
                },
                dV + asset.calc_value()
            )
        }, tp, dV);

        (
            expected_id+1,
            tp,
            dV
        )
    }, first_id, Option[Time]::None, 0);

    (tp.unwrap(), dV)
}