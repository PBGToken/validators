module BurnOrderModule

import { AssetPtr } from AssetPtrModule
import { sum_lovelace } from PortfolioModule
import { current_script, get_current_input, tx } from ScriptContext
import Tokens

enum BurnOrderReturnValue {
    L {
        lovelace: Int
    }
    V {
        value: Value
    }
}

// don't count ADA
func count_asset_classes(v: Value) -> Int {
    v.to_map().fold((n: Int, mph: MintingPolicyHash, tokens: Map[ByteArray]Int) -> Int {
        if (mph == MintingPolicyHash::new(#)) {
            n
        } else {
            n + tokens.length
        }
    }, 0)
}

struct BurnOrder {
    return_address:   Address
    return_datum:     Data
    min_return_value: BurnOrderReturnValue
    max_price_age:    Duration

    func find_return(self) -> TxOutput {
        // invariants taken out of loop for slightly better performance
        return_address = self.return_address
        return_datum = self.return_datum

        tx.outputs.find((output: TxOutput) -> {
            output.address == return_address
            && output.datum.switch{ // using output.datum.inline fails if an unrelated output is sent to same address without an inline datum, so we must use a switch to be safe
                Inline{d} => d == return_datum,
                else => false
            }
        })
    }

    func diff(self) -> Value {
        input = current_script.switch{
            burn_order_validator => get_current_input(),
            else => error("unexpected current script (BurnOrder.diff() can only be called within burn_order_validator)")
        }
            
        return = self.find_return()

        input.value - return.value
    }

    func value(self) -> Value {
        d = self.diff()

        // prevent token dust attack with vouchers (other token dust attack prevention is in self.returned_enough())
        // we do this here instead of in self.find_return() because we don't want to check tokens that were also included on the input side (so we want to perform this check on the net tokens returned)
        assert(d.to_map().all((mph: MintingPolicyHash, tokens: Map[ByteArray]Int) -> {
            if (mph == Tokens::policy) {
                tokens.all((_, qty: Int) -> {
                    qty >= 0
                })
            } else {
                true
            }
        }), "can't return new dvp policy related tokens")

        (-1) * d.delete_policy(Tokens::policy)
    }

    func value_lovelace(self, ptrs: []AssetPtr) -> Int {
        sum_lovelace(
            self.value(), 
            tx.inputs, 
            ptrs, 
            self.price_expiry()
        )
    }

    // only used for checks resulting in booleans, so tx.time_range.end doesn't need to bounded by tx.time_range.start + Duration::DAY
    func price_expiry(self) -> Time {
        tx.time_range.end - self.max_price_age
    }

    func returned_enough(self, ptrs: []AssetPtr) -> Bool {
        self.min_return_value.switch{
            L{lovelace} => {
                self.value_lovelace(ptrs) >= lovelace
            },
            V{requested_value} => {
                actual_value = self.value()

                // prevent token dust attack with other tokens by assuring that the returned value is either ADA, or exists in the requested value
                //  the fastest way to do this is to compare the number of asset classes in the returned value and in the requested value
                actual_value >= requested_value
                && count_asset_classes(actual_value) <= count_asset_classes(requested_value)
            }
        }
    }
}