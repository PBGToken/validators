module BurnOrderModule

import { AssetPtr } from AssetPtrModule
import { sum_lovelace } from PortfolioModule
import { current_script, get_current_input, tx } from ScriptContext
import Tokens

enum BurnOrderReturnValue {
    L {
        lovelace: Int
    }
    V {
        value: Value
    }
}

struct BurnOrder {
    return_address:   Address
    return_datum:     Data
    min_return_value: BurnOrderReturnValue
    max_price_age:    Duration

    func find_return(self) -> TxOutput {
        // TODO: take invariants out of loop for performance
        tx.outputs.find((output: TxOutput) -> {
            output.address == self.return_address
            && output.datum.switch{ // using output.datum.inline fails if an unrelated output is sent to same address without an inline datum, so we must use a switch to be safe
                Inline{d} => d == self.return_datum,
                else => false
            }
        })
    }

    func diff(self) -> Value {
        input = current_script.switch{
            burn_order_validator => get_current_input(),
            else => error("unexpected current script (BurnOrder.diff() can only be called within burn_order_validator)")
        };
            
        return = self.find_return();

        input.value - return.value
    }

    func value(self) -> Value {
        d = self.diff();

        // prevent token dust attack with vouchers (other token dust attack prevention is in self.returned_enough())
        assert(d.to_map().all((mph: MintingPolicyHash, tokens: Map[ByteArray]Int) -> {
            if (mph == Tokens::policy) {
                tokens.length <= 2
            } else {
                true
            }
        }), "can only return 1 voucher and dvp tokens when fulfilling a burn order");

        (-1) * d.delete_policy(Tokens::policy)
    }

    func value_lovelace(self, ptrs: []AssetPtr) -> Int {
        sum_lovelace(
            self.value(), 
            tx.inputs, 
            ptrs, 
            self.price_expiry()
        )
    }

    func burned_tokens(self) -> Int {
        self.diff().get(Tokens::dvp_token)
    }

    func price_expiry(self) -> Time {
        tx.time_range.end - self.max_price_age
    }

    func returned_enough(self, ptrs: []AssetPtr) -> Bool {
        self.min_return_value.switch{
            L{lovelace} => {
                self.value_lovelace(ptrs) >= lovelace
            },
            V{value} => {
                v = self.value();

                // prevent token dust attack with other tokens by assuring that the returned value is either ADA, or exists in the requested value
                //  we can do this while checking that sufficient value is being returned
                v.to_map().all((mph: MintingPolicyHash, tokens: Map[ByteArray]Int) -> {
                    if (mph == MintingPolicyHash::new(#) && value.to_map().all((other_mph: MintingPolicyHash, _) -> {other_mph != MintingPolicyHash::new(#)})) {
                        // can always return ADA, even if it wasn't requested
                        true
                    } else {
                        (_, other_tokens) = value.to_map().find((other_mph: MintingPolicyHash, _) -> {
                            other_mph == mph
                        });

                        tokens.all((token_name: ByteArray, qty: Int) -> {
                            (_, other_qty) = other_tokens.find((other_token_name: ByteArray, _) -> {
                                other_token_name == token_name
                            });

                            qty >= other_qty
                        })
                    }
                })
            }
        }
    }
}