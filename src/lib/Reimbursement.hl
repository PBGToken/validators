module ReimbursementModule

import Addresses
import { current_script, get_current_input, tx } from ScriptContext
import { SuccessFee, calc_alpha } from SuccessFeeModule
import TokenNames
import Tokens
import { Voucher } from VoucherModule

enum ReimbursementState {
    Collecting 
    Extracting {
        end_price:            Ratio
        success_fee:          SuccessFee
        n_remaining_vouchers: Int
    }
}

struct Reimbursement {
    start_price: Ratio
    state:       ReimbursementState

    func find_input() -> (Int, Reimbursement, Int) {
        input = current_script.switch{
            reimbursement_validator => get_current_input(),
            else => tx.inputs.find((input: TxInput) -> {
                input.address == Addresses::reimbursement
            })
        }

        id = Tokens::parse_reimbursement(input)

        (
            id, 
            input.datum.inline.as[Reimbursement], 
            input.value.get_safe(Tokens::dvp_token)
        )
    }

    func find_output(id: Int) -> (Reimbursement, Int) {
        token_asset_class = Tokens::reimbursement(id)

        output = tx.outputs.find((output: TxOutput) -> {
            output.address == Addresses::reimbursement
            && output.value.get_safe(token_asset_class) == 1
        })

        tokens = output.value.get_policy(Tokens::policy)
        n_dvp_tokens = tokens.get_safe(TokenNames::dvp_token).switch{
            Some{n} => n,
            else => 0
        }

        assert(tokens.length <= 2, "output contains unexpected tokens")
        assert(output.value.delete_lovelace().to_map().length == 1, "output contains unexpected token policies")

        (output.datum.inline.as_strictly[Reimbursement], n_dvp_tokens)
    }

    func find_thread() -> (Int, Reimbursement, Int, Reimbursement, Int) {
        (id, r0, n0) = Reimbursement::find_input()
        (r1, n1) = Reimbursement::find_output(id)
    
        (id, r0, n0, r1, n1)
    }

    func calc_phi_alpha_ratio(self, start_price: Ratio = self.start_price) -> Real {
        self.state.switch{
            Extracting{end_price, success_fee, _} => {
                alpha = calc_alpha(start_price, end_price)

                phi_alpha = success_fee.apply(alpha)
        
                phi_alpha/(alpha - phi_alpha)
            },
            else => error("can't calculate phi alpha ratio while in Collecting state")
        }
    }

    // reuse main_phi_alpha_ratio instead of recalcuting it here because Helios doesn't lift loop invariants out of loops
    func calc_success_fee_reimbursement(self, voucher: Voucher, main_phi_alpha_ratio: Real) -> Int {
        voucher_phi_alpha_ratio = self.calc_phi_alpha_ratio(voucher.price)

        (voucher.tokens*(main_phi_alpha_ratio - voucher_phi_alpha_ratio)).floor().bound_min(0)
    }
}

func witnessed_by_reimbursement(id: Int) -> Bool {
    tx.inputs.any((input: TxInput) -> {
        input.address == Addresses::reimbursement
        && Tokens::parse_reimbursement(input) == id
    })
}