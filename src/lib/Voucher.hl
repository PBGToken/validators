module VoucherModule

import Addresses
import { tx } from ScriptContext
import TokenNames
import Tokens

struct Voucher {
    return_address: Address "owner"
    return_datum: Data "datum"
    tokens: Int "tokens"
    price: Ratio "price"
    period_id: Int "period"
    name: String "name"
    description: String "description"
    image: String "image"
    url: String "url"

    func get_current() -> (Int, Voucher) {
        input = tx.get_current_input();

        id = Tokens::parse_voucher_ref(input);

        (id, input.datum.inline.as[Voucher])
    }

    func find_output(id: Int) -> Voucher {
        output = tx.outputs.find((output: TxOutput) -> {
            output.address == Addresses::voucher
            && Tokens::contains_only_voucher_ref(output, id)
        });

        output.datum.inline.as[Voucher]
    }

    func find_return(self) -> TxOutput {
        tx.outputs.find((output: TxOutput) -> {
            output.address == self.return_address
            && output.datum.inline == self.return_datum
        })
    }
}

/**
 * Returns the total number of tokens mentioned in the vouchers
 * Asserts that token_name is either dvp token or voucher
 * Assets that each minted voucher has a unique id
 */
func validate_minted_vouchers(price: Ratio, period_id: Int, n_vouchers_0: Int) -> Int {
    tokens_minted = Tokens::get_minted();

    n_vouchers_minted = tokens_minted.fold((n_vouchers: Int, token_name: ByteArray, qty: Int) -> {
        if (token_name == TokenNames::dvp_token) {
            n_vouchers
        } else {
            assert(qty == 1, "not exactly 1");

            TokenNames::parse_voucher_ref(token_name).switch{
                Some{id} => {
                    // assure the user nft is minted
                    assert(tokens_minted.get(Tokens::voucher_user_nft(id)) == 1, "not exactly one user nft minted");
    
                    voucher = Voucher::find_output(id);

                    // return_address and return_datum are checked by the mint_order_validator
                    assert(
                        voucher.tokens > 0 
                        && voucher.price == price.relative_to_benchmark()
                        && voucher.period_id == period_id, 
                        "invalid Voucher datum"
                    )

                    n_vouchers + 1
                },
                else => {
                    id = TokenNames::parse_voucher_user_nft(token_name).unwrap();
    
                    // make sure the ref token was minted
                    assert(tokens_minted.get(Tokens::voucher_ref_token(id)) == 1, "not exactly one ref token minted");
                    
                    // the count is incremented via the ref token, not the user nft
                    n_vouchers
                }
            }
        }
    }, 0);

    // assert each voucher has a unique id
    last_voucher_id = tx.outputs.fold((prev_id: Int, output: TxOutput) -> {
        if (output.address == Addresses::voucher) {
            id = prev_id + 1;

            assert(Tokens::contains_only_voucher_ref(output, id), "voucher doesn't have expected id");

            id
        } else {
            prev_id
        }
    }, last_voucher_id);

    (n_vouchers_minted, last_voucher_id)
}

/**
 * Asserts the token name is either the dvp token or a voucher
 */
func validate_burned_vouchers(period_id: Int) -> Int {
    tokens_minted = Tokens::get_minted();

    tokens_minted.fold((n_vouchers: Int, token_name: ByteArray, qty: Int) -> {
        if (token_name == TokenNames::dvp_token) {
            n_vouchers
        } else {
            assert(qty == -1, "not exactly -1");

            TokenNames::parse_voucher_ref(token_name).switch{
                Some{id} => {
                    assert(tokens_minted.get(Tokens::voucher_user_nft(id)) == -1, "not exactly one user nft burned");

                    voucher = Voucher::get_input(id);

                    assert(voucher.period_id == period_id, "Voucher from other period");

                    n_vouchers + 1
                },
                else => {
                    id = TokenNames::parse_voucher_user_nft(token_name).unwrap();

                    assert(tokens_minted.get(Tokens::voucher_ref_token(id)) == -1, "not exactly one ref token burned");

                    n_vouchers
                }
            }
        }
    }, 0)
}