module MintOrderModule

import { AssetPtr } from AssetPtrModule
import { sum_lovelace } from PortfolioModule
import { current_script, get_current_input, tx } from ScriptContext
import TokenNames
import Tokens

struct MintOrder {
    return_address: Address
    return_datum:   Data
    min_tokens:     Int
    max_price_age:  Duration

    func find_return(self) -> TxOutput {
        // invariants taken out of loop for slightly better performance
        return_address = self.return_address
        return_datum = self.return_datum
        
        return = tx.outputs.find((output: TxOutput) -> {
            output.address == return_address 
            && output.datum.switch{ // using output.datum.inline fails if an unrelated output is sent to same address without an inline datum, so we must use a switch to be safe
                Inline{d} => d == return_datum,
                else => false   
            }
        })

        // prevent token dust attack by only allowing ADA and DVP tokens (including at most one voucher) to be returned
        assert(return.value.to_map().all((mph: MintingPolicyHash, tokens: Map[ByteArray]Int) -> {
            if (mph == MintingPolicyHash::new(#)) {
                true
            } else if (mph == Tokens::policy) {
                tokens.length <= 2 // at most the DVP tokens and a voucher
            } else {
                false
            }
        }), "can only return ADA and DVP tokens")

        return
    }

    func diff(self) -> Value {
        input: TxInput = current_script.switch{
            mint_order_validator => get_current_input(),
            else => error("unexpected")
        }

        return = self.find_return()

        input.value - return.value
    }

    // only used for checks resulting in booleans, so tx.time_range.end doesn't need to bounded by tx.time_range.start + Duration::DAY
    func price_expiry(self) -> Time {
        tx.time_range.end - self.max_price_age
    }

    func returned_tokens(self) -> Int {
        (-1) * self.diff().get(Tokens::dvp_token)
    }

    func value(self) -> Value {
        self.diff().delete_policy(Tokens::policy)
    }

    func value_lovelace(self, ptrs: []AssetPtr) -> Int {
        sum_lovelace(
            self.value(), 
            tx.inputs, 
            ptrs, 
            self.price_expiry()
        )
    }

    func voucher_id(self) -> Int {
         // check returned voucher
         (voucher_nft_name, qty) = self.diff().get_policy(Tokens::policy).find((token_name: ByteArray, _) -> {
            TokenNames::has_voucher_nft_prefix(token_name)
        })

        assert(qty <= -1, "expected at least one token returned")

        TokenNames::parse_voucher_nft(voucher_nft_name).unwrap()
    }
}