module AssetPtrModule

import { Asset } from AssetModule
import { AssetGroup } from AssetGroupModule
import { policy } from Tokens
import TokenNames

struct AssetPtr {
    group_index: Int
    asset_class_index: Int

    // throws an error if not found
    func resolve_input(self, inputs: []TxInput, asset_class: AssetClass) -> Asset {
        input = inputs.get(self.group_index);

        tokens = input.value.get_policy(policy);

        assert(tokens.any((token_name: ByteArray, _) -> {
            TokenNames::has_assets_prefix(token_name)
        }), "assets token not found");

        // it is cleaner to cast to AssetGroup instead of the underlying []Asset
        group = input.datum.inline.as[AssetGroup];

        asset = group.assets.get(self.asset_class_index);

        assert(asset.asset_class == asset_class, "unexpected asset class");

        asset
    }

    // throws an error if not found
    func resolve_output(self, outputs: []TxOutput, asset_class: AssetClass) -> Asset {
        output = outputs.get(self.group_index);

        group_asset_class = output.value.get_singleton_asset_class();
        
        assert(group_asset_class.mph == policy, "unexpected mph of assets token");
        assert(TokenNames::has_assets_prefix(group_asset_class.token_name), "doesn't contain an assets token");

        // it is cleaner to cast to AssetGroup instead of the underlying []Asset
        group = output.datum.inline.as_strictly[AssetGroup];

        asset = group.assets.get(self.asset_class_index);

        assert(asset.asset_class == asset_class, "unexpected asset class");

        asset
    }
}