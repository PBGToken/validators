module PriceModule

import Addresses
import { Config, price_expiry } from ConfigModule
import { current_script, get_current_input, tx } from ScriptContext
import Tokens

struct Price {
    value:     Ratio
    timestamp: Time

    func find() -> Price {
        input = current_script.switch{
            price_validator => get_current_input(),
            else => tx.ref_inputs.find((input: TxInput) -> {
                input.address == Addresses::price
            })
        };

        assert(Tokens::contains_only_price(input), "doesn't contain only the price token");

        input.datum.inline.as[Price]
    }

    func find_input() -> Price {
        input = current_script.switch{
            price_validator => get_current_input(),
            else => tx.inputs.find((input: TxInput) -> {
                input.address == Addresses::price
            })
        };

        assert(Tokens::contains_only_price(input), "doesn't contain only the price token");

        input.datum.inline.as[Price]
    }

    func find_output() -> Price {
        output = tx.outputs.find((output: TxOutput) -> {
            output.address == Addresses::price
        });

        assert(Tokens::contains_only_price(output), "doesn't contain only the price token");

        output.datum.inline.as_strictly[Price]
    }

    func find_ref() -> Price {
        input = tx.ref_inputs.find((input: TxInput) -> {
            input.address == Addresses::price
        });

        assert(Tokens::contains_only_price(input), "doesn't contain only the price token");

        input.datum.inline.as[Price]
    }

    func find_thread() -> (Price, Price) {
        (
            Price::find_input(),
            Price::find_output()
        )
    }

    func is_not_expired(
        self, 
        expiry: Time = price_expiry()
    ) -> Bool {
        self.timestamp >= expiry
    }

    func relative_to_benchmark(self) -> Ratio {
        (config, _) = Config::find();

        config.fees.success_fee.get_benchmark_price(self.value)
    }
}