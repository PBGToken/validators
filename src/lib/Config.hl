module ConfigModule

import Addresses
import { current_script, get_current_input, tx } from ScriptContext
import { SuccessFee } from SuccessFeeModule
import Tokens

// defined here so we can use to determine sane upper bounds for minimum mint and burn fees
const INITIAL_PRICE: Ratio = Ratio::new(100, 1)

struct MintFeeConfig {
    relative: Real
    minimum:  Int

    // the result is a fraction of n
    func apply(self, n: Int) -> Int {
        (n*self.relative).floor().bound_min(self.minimum)
    }

    func deduct(self, n: Int) -> Int {
        n - self.apply(n)
    }
}

struct BurnFeeConfig {
    relative: Real
    minimum:  Int

    // the result is a fraction of n
    func apply(self, n: Int) -> Int {
        (n*self.relative).floor().bound_min(self.minimum)
    }

    func deduct(self, n: Int) -> Int {
        n - self.apply(n)
    }
}

struct ManagementFeeConfig {
    relative: Real
    period:   Duration
}

struct SuccessFeeConfig {
    fee:       SuccessFee
    benchmark: StakingValidatorHash
    min_reimbursement: Int // below this DVP token quantity a voucher reimbursement can be ignored

    func get_benchmark_price(
        self, 
        lovelace_price: Ratio, 
        benchmark: StakingValidatorHash = self.benchmark
    ) -> Ratio {
        benchmark_price = tx.redeemers.get(ScriptPurpose::new_rewarding(StakingCredential::new_hash(StakingHash::new_validator(benchmark)))).as[Ratio];

        lovelace_price*benchmark_price
    }
}

struct FeesConfig {
    mint_fee:       MintFeeConfig
    burn_fee:       BurnFeeConfig
    management_fee: ManagementFeeConfig
    success_fee:    SuccessFeeConfig
}

struct TokenConfig {
    max_supply:    Int
    max_price_age: Duration
}

struct GovernanceConfig {
    update_delay: Duration
    delegate: StakingValidatorHash
}

enum ConfigChangeProposal {
    AddingAssetClass {
        asset_class: AssetClass
    }
    RemovingAssetClass {
        asset_class: AssetClass
    }
    // the min_reimbursement is updated using a separate Governance action
    UpdatingSuccessFee {
        period:    Duration
        benchmark: StakingValidatorHash
        fee:       SuccessFee
    }
    IncreasingMaxTokenSupply {
        max_supply: Int
    }
    ChangingAgent {
        agent: PubKeyHash
    }
    ChangingOracle {
        oracle: StakingValidatorHash
    }
    ChangingGovernance {
        delegate:     StakingValidatorHash
        update_delay: Duration
    }
    ChangingMintFee {
        relative: Real
        minimum:  Int
    }
    ChangingBurnFee {
        relative: Real
        minimum:  Int
    }
    ChangingManagementFee {
        relative: Real
        period:   Duration
    }
    ChangingMaxPriceAge {
        max_price_age: Duration
    }
    ChangingMinReimbursement {
        min_reimbursement: Int 
    }
    ChangingMetadata {
        metadata_hash: ByteArray
    }
}

enum ConfigState {
    Idle
    Changing {
        proposal_timestamp: Time
        proposal: ConfigChangeProposal
    }

    func is_idle(self) -> Bool {
        self.switch{
            Idle => true,
            else => false
        }
    }

    /**
     * Throws an error if in Idle state
     */
    func get_proposal(self) -> ConfigChangeProposal {
        self.switch{
            Idle => error("Idle"),
            Changing{_, proposal} => proposal
        }
    }
}

// first fields are used more often than last fields
struct Config {
    agent:      PubKeyHash
    fees:       FeesConfig
    token:      TokenConfig
    oracle:     StakingValidatorHash
    governance: GovernanceConfig
    state:      ConfigState

    func find() -> (Config, Bool) {
        (input, is_spent) = current_script.switch{
            config_validator => (get_current_input(), true),
            mint_order_validator => (tx.ref_inputs.find((input: TxInput) -> {
                input.address == Addresses::config
            }), false),
            burn_order_validator => (tx.ref_inputs.find((input: TxInput) -> {
                input.address == Addresses::config
            }), false),
            else => {
                tx.ref_inputs.find_safe((input: TxInput) -> {
                    input.address == Addresses::config
                }).switch{
                    Some{ref_input} => (ref_input, false),
                    else => (
                        tx.inputs.find((input: TxInput) -> {
                            input.address == Addresses::config
                        }), 
                        true
                    )
                }
            }
        };

        assert(Tokens::contains_config(input), "doesn't contain the config token");

        (input.datum.inline.as[Config], is_spent)
    }

    func find_input() -> Config {
        input = current_script.switch{
            config_validator => get_current_input(),
            else => tx.inputs.find((input: TxInput) -> {
                input.address == Addresses::config
            })
        };

        assert(Tokens::contains_config(input), "doesn't contain the config token");

        input.datum.inline.as[Config]
    }

    func find_output() -> Config {
        output = tx.outputs.find((output: TxOutput) -> {
            output.address == Addresses::config
        });

        assert(Tokens::contains_only_config(output), "doesn't contain only the config token");

        output.datum.inline.as_strictly[Config]
    }

    func find_ref() -> Config {
        input = tx.ref_inputs.find((input: TxInput) -> {
            input.address == Addresses::config
        });

        assert(Tokens::contains_config(input), "doesn't contain the config token");

        input.datum.inline.as[Config]
    }

    func find_thread() -> (Config, Config) {
        (
            Config::find_input(),
            Config::find_output()
        )
    }

    func get_benchmark_price(
        self, 
        lovelace_price: Ratio, 
        benchmark: StakingValidatorHash = self.fees.success_fee.benchmark
    ) -> Ratio {
        self.fees.success_fee.get_benchmark_price(lovelace_price, benchmark)
    }
}

func deduct_burn_fee(n: Int) -> Int {
    (config, _) = Config::find();

    config.fees.burn_fee.deduct(n)
}

func deduct_mint_fee(n: Int) -> Int {
    (config, _) = Config::find();

    config.fees.mint_fee.deduct(n)
}

// only used for checks resulting in booleans, so tx.time_range.end doesn't need to bounded by tx.time_range.start + Duration::DAY
func price_expiry() -> Time {
    (config, _) = Config::find();

    tx.time_range.end - config.token.max_price_age
}

func signed_by_agent(
    // we must use Config::find() instead of Config::find_input() because eg. the update price transactions call this function without arguments and only reference the config UTxO
    agent: PubKeyHash = Config::find().first.agent
) -> Bool {
    tx.is_signed_by(agent)
}

func witnessed_by_oracle(
    // we must use Config::find() instead of Config::find_input() because the update asset price transactions call this function without arguments and only reference the config UTxO
    oracle: StakingValidatorHash = Config::find().first.oracle
) -> Bool {
    tx.withdrawals.any((scred: StakingCredential, _) -> Bool {
        scred.switch{
            Hash{h} => {
                h.switch{
                    Validator{svh} => svh == oracle,
                    else => false
                }
            },
            else => false
        }
    })
}

func witnessed_by_governance(
    // using Config::find_input() is fine because witnessed_by_governance() is only used in the config_validator
    governance: StakingValidatorHash = Config::find_input().governance.delegate
) -> Bool {    
    tx.withdrawals.any((scred: StakingCredential, _) -> {
        scred.switch{
            Hash{h} => {
                h.switch{
                    Validator{svh} => svh == governance,
                    else => false
                }
            },
            else => false
        }
    })
}
