module Tokens

import { current_script, get_current_input, tx } from ScriptContext
import TokenNames

const direct_policy = MintingPolicyHash::from_script_hash(Scripts::fund_policy)

// as a function because it can fail
func indirect_policy() -> MintingPolicyHash {
    input = get_current_input();
    
    // ignores ADA
    input.value.get_singleton_asset_class().mph // this is why it is important that these UTxOs only contain a single policy
}

const policy: MintingPolicyHash = current_script.switch{
    fund_policy          => direct_policy,
    mint_order_validator => direct_policy,
    burn_order_validator => direct_policy,
    supply_validator     => indirect_policy(),
    assets_validator     => indirect_policy(),
    portfolio_validator  => indirect_policy(),
    price_validator      => indirect_policy(),
    reimbursement_validator => {
        input = get_current_input();
        input.value.get_singleton_asset_class().mph
    },
    voucher_validator    => indirect_policy(),
    config_validator     => indirect_policy(),
    metadata_validator   => indirect_policy(),
    oracle_delegate      => direct_policy,
    benchmark_delegate   => direct_policy,
    governance_delegate  => direct_policy
}

const dvp_token: AssetClass = AssetClass::new(policy, TokenNames::dvp_token)
const metadata:  AssetClass = AssetClass::new(policy, TokenNames::metadata)
const config:    AssetClass = AssetClass::new(policy, TokenNames::config)
const portfolio: AssetClass = AssetClass::new(policy, TokenNames::portfolio)
const price:     AssetClass = AssetClass::new(policy, TokenNames::price)
const supply:    AssetClass = AssetClass::new(policy, TokenNames::supply)

func assets(id: Int) -> AssetClass {
    AssetClass::new(policy, TokenNames::assets(id))
}

func reimbursement(id: Int) -> AssetClass {
    AssetClass::new(policy, TokenNames::reimbursement(id))
}

func voucher_ref_token(id: Int) -> AssetClass {
    AssetClass::new(policy, TokenNames::voucher_ref(id))
}

func voucher_user_nft(id: Int) -> AssetClass {
    AssetClass::new(policy, TokenNames::voucher_nft(id))
}

func get_minted() -> Map[ByteArray]Int {
    tx.minted.get_policy(policy)
}

func contains[V: Valuable](v: V, asset_class: AssetClass) -> Bool {
    v.value.get_safe(asset_class) > 0
} 

func contains_assets[V: Valuable](v: V, id: Int) -> Bool {
    contains(v, assets(id))
}

func contains_config[V: Valuable](v: V) -> Bool {
    contains(v, config)
}

func contains_metadata[V: Valuable](v: V) -> Bool {
    contains(v, metadata)
}

func contains_portfolio[V: Valuable](v: V) -> Bool {
    contains(v, portfolio)
}

func contains_price[V: Valuable](v: V) -> Bool {
    contains(v, price)
}

func contains_reimbursement[V: Valuable](id: Int) -> (V) -> Bool {
    (v: V) -> {
        contains(v, reimbursement(id))
    }
}

func contains_supply[V: Valuable](v: V) -> Bool {
    contains(v, supply)
}

func contains_voucher_ref[V: Valuable](v: V, id: Int) -> Bool {
    contains(v, voucher_ref_token(id))
}

// being able to retrieve a specific DVP policy depends on state UTxOs only contain a single policy type
func contains_only[V: Valuable](v: V, asset_class: AssetClass) -> Bool {
    v.value.get_singleton_asset_class() == asset_class // TODO: this is much more restrictive than in the previous version of the code, check that this doesn't throw unintended errors
}

func contains_only_assets[V: Valuable](v: V, id: Int) -> Bool {
    contains_only(v, assets(id))
}

func contains_only_config[V: Valuable](v: V) -> Bool {
    contains_only(v, config)
}

func contains_only_metadata[V: Valuable](v: V) -> Bool {
    contains_only(v, metadata)
}

func contains_only_portfolio[V: Valuable](v: V) -> Bool {
    contains_only(v, portfolio)
}

func contains_only_price[V: Valuable](v: V) -> Bool {
    contains_only(v, price)
}

func contains_only_reimbursement[V: Valuable](v: V, id: Int) -> Bool {
    contains_only(v, reimbursement(id))
}

func contains_only_supply[V: Valuable](v: V) -> Bool {
    contains_only(v, supply)
}

func contains_only_voucher_ref[V: Valuable](v: V, id: Int) -> Bool {
    contains_only(v, voucher_ref_token(id))
}

func contains_only_any_assets[V: Valuable](v: V) -> Bool {
    tokens = v.value.get_policy(policy);

    if (tokens.length != 1) {
        false
    } else {
        (token_name, qty) = tokens.head;

        if (qty != 1) {
            error("expected only 1 assets token")
        } else {
            TokenNames::parse_assets(token_name).switch{
                Some => true,
                None => false
            }
        }
    }
}

/**
 * Throws an error if the value contains other tokens
 */
func parse_assets[V: Valuable](v: V) -> Int {
    tokens = v.value.get_policy(policy);

    assert(tokens.length == 1, "can only contain one assets token");

    (token_name, qty) = tokens.head;

    assert(qty == 1, "expected only 1 assets token");

    TokenNames::parse_assets(token_name).unwrap()
}

func parse_reimbursement[V: Valuable](v: V) -> Int {
    tokens = v.value.get_policy(policy);

    assert(tokens.length == 1, "can only contain one reimbursement token");

    (token_name, qty) = tokens.head;

    assert(qty == 1, "expected only 1 reimbursement token");

    TokenNames::parse_reimbursement(token_name).unwrap()
}

func parse_voucher_ref[V: Valuable](v: V) -> Int {
    tokens = v.value.get_policy(policy);

    assert(tokens.length == 1, "can only contain one voucher ref token");

    (token_name, qty) = tokens.head;

    assert(qty == 1, "expected only 1 voucher ref token");

    TokenNames::parse_voucher_ref(token_name).unwrap()
}

func nothing_minted() -> Bool {
    get_minted().is_empty()
}

func minted_only_dvp_tokens() -> Bool {
    tokens = get_minted();

    tokens.length <= 1
    && tokens.all_keys((token_name: ByteArray) -> {
        token_name == TokenNames::dvp_token
    })
}