module Vault

import Addresses
import { Asset } from AssetModule
import { AssetGroup } from AssetGroupModule
import { AssetPtr } from AssetPtrModule
import { price_expiry } from ConfigModule
import { sum_lovelace } from PortfolioModule
import { tx } from ScriptContext
import TokenNames
import Tokens

const VAULT_DATUM: ByteArray = #

func nothing_spent() -> Bool {
    tx.inputs.all((input: TxInput) -> Bool {
        input.address.credential != Addresses::vault.credential
        && input.address.credential != Addresses::assets.credential
    })
}

/**
 * Positive entries in the returned Value mean the vault increases in that asset class
 * Negative entries in the returned Value mean the vault decreases in that asset class
 */
func diff() -> Value {
    addr = Addresses::vault;

    // vault outputs are transaction inputs and simply match the vault credential 
    //  (validate as many UTxOs taken out of the vault as possible)
    out = tx.inputs.fold((prev: Value, input: TxInput) -> {
        if (input.address.credential == addr.credential) {
            prev + input.value
        } else {
            prev
        }
    }, Value::ZERO);

    // vault inputs are transaction outputs that must match the address and datum exactly, and can only contain a single asset class in addition to ADA
    //  (be as restrictive as possible when sending UTxOs to the vault)
    //  this will throw an error if and output datum at the vault address isn't a ByteArray
    in = tx.outputs.fold((prev: Value, output: TxOutput) -> {
        if (
            output.address == addr 
            && output.datum.inline.as[ByteArray] == VAULT_DATUM 
            && output.value.delete_lovelace().flatten().length <= 1
        ) {
            prev + output.value
        } else {
            prev
        }
    }, Value::ZERO);

    in - out
}

// positive: vault increases in value
// negative: vault decreases in value
func diff_lovelace(ptrs: []AssetPtr) -> Int {
    d = diff();

    sum_lovelace(d, tx.inputs, ptrs, price_expiry())
}

func diff_counted(d_lovelace: Int, expected_tick: Int) -> Value {
    m: Map[AssetClass]Int = tx.inputs.fold((mo: Map[AssetClass]Int, input: TxInput) -> {
        if (input.address == Addresses::assets) {
            // extract the token
            tokens = input.value.get_policy(Tokens::policy);

            (token_name, qty) = tokens.find((token_name: ByteArray, _) -> Bool {
                TokenNames::has_assets_prefix(token_name)
            });

            assert(qty > 0, "not a positive number of assets tokens");

            id = TokenNames::parse_assets(token_name).unwrap();
            group_asset_class = Tokens::assets(id);

            output = tx.outputs.find((output: TxOutput) -> {
                output.address == Addresses::assets
                && output.value.get_safe(group_asset_class) == 1
            });
            
            assets0 = input.datum.inline.as[AssetGroup].assets;
            assets1 = output.datum.inline.as[AssetGroup].assets;

            // the fold method iterates over the shortest of either, so the length equality must be checked explicitly
            assert(assets0.length == assets1.length, "assets list not same length");

            assets0.zip(assets1).fold((mi: Map[AssetClass]Int, a: Asset, b: Asset) -> {
                assert(
                    b.asset_class == a.asset_class
                    && b.count_tick == expected_tick
                    && b.price == a.price
                    && b.price_timestamp == a.price_timestamp,
                    "invalid asset change"
                );

                // TODO: prepend is cheaper, it might also be better to ignore this if b.count == a.count
                mi.append(a.asset_class, b.count - a.count)
            }, mo)
        } else {
            mo
        }
    }, Map[AssetClass]Int{});

    // TODO: prepend is cheaper, and only do this if d_lovelace is non-zero?
    m_ = m.append(AssetClass::ADA, d_lovelace);

    // this function sorts by assetclass to make it easier to detect duplicates
    Value::from_flat(m_)
}

/**
 * This is an expensive function
 */
func counters_are_consistent(d_lovelace: Int, tick: Int) -> Bool {
    d = diff().sort();
    dc = diff_counted(d_lovelace, tick);
    d.to_map() == dc.to_map()
}
