spending supply_validator

import { AssetPtr } from AssetPtrModule
import { Config, signed_by_agent } from ConfigModule
import { Price } from PriceModule
import { Reimbursement } from ReimbursementModule
import { tx } from ScriptContext
import { Supply } from SupplyModule
import TokenNames
import Tokens
import Vault
import { validate_burned_vouchers, validate_minted_vouchers } from VoucherModule

struct AssetPtrs {
    asset_input_ptrs: []AssetPtr
    asset_group_output_ptrs: []Int
}

func validate_reward_success(supply0: Supply, supply1: Supply, D: Int) -> Bool {
    price = Price::find_ref();

    end_price = price.relative_to_benchmark();
    Dalpha = supply0.calc_success_fee_dilution(end_price); // internally bound by 0
    (reimbursement, _) = Reimbursement::find_output(supply0.period_id(), Dalpha);
    (config0, is_updated) = Config::find();
    tokens_minted = Tokens::get_minted();

    (D == Dalpha).trace_if_false("incorrect number of tokens minted")
    && price.is_not_expired().trace_if_false("price expired")
    && (supply1.success_fee.start_time == supply0.success_fee.start_time + supply0.success_fee.period).trace_if_false("new success fee start time not set to correct value")
    && (supply1.success_fee.period_id == supply0.success_fee.period_id + 1).trace_if_false("new success fee period id not set to correct value") // TODO: rename period to cycle_duration, and period_id to cycle_id
    && (supply1.last_voucher_id == supply0.last_voucher_id).trace_if_false("last voucher id must be persisted")
    && (supply1.n_vouchers == 0).trace_if_false("new n_vouchers count not set to correct value")
    && (supply1.n_lovelace == supply0.n_lovelace).trace_if_false("n_lovelace count changed")
    && (supply1.management_fee_timestamp == supply0.management_fee_timestamp).trace_if_false("management fee timestamp changed")
    && (reimbursement.n_remaining_vouchers == supply0.n_vouchers).trace_if_false("n remaining vouchers in reimbursement not set to expected value")
    && (reimbursement.start_price == supply0.success_fee.start_price).trace_if_false("reimbursement start price not set to expected value")
    && (reimbursement.end_price == end_price).trace_if_false("unexpected reimbursement end price")
    && (reimbursement.success_fee == config0.fees.success_fee.fee).trace_if_false("unexpected reimbursement success fee settings")
    && if (is_updated) {
        UpdatingSuccessFee{period, _, _} = config0.state.get_proposal();

        config1 = Config::find_output();
        new_price = config1.fees.success_fee.get_benchmark_price(price.value);

        (supply1.success_fee.start_price == new_price).trace_if_false("unexpected cycle start price " + supply1.success_fee.start_price.show() + ", expected " + new_price.show())
        && supply1.success_fee.period == period
    } else {
        config0.state.switch{
            Changing{_, proposal} => proposal.switch{
                UpdatingSuccessFee => false, // config must be spent
                else => true
            },
            else => true
        }
        && (supply1.success_fee.start_price == end_price).trace_if_false("unexpected new supply start price")
        && (supply1.success_fee.period == supply0.success_fee.period).trace_if_false("unexpected new supply period")
    }
    && tokens_minted.all((token_name: ByteArray, qty: Int) -> {
        token_name == TokenNames::dvp_token
        || (token_name == TokenNames::reimbursement(supply0.success_fee.period_id) && qty == 1)
    }).trace_if_false("illegal tokens minted")
    && Vault::nothing_spent().trace_if_false("something spent from vault") // also assures that no asset groups are spent
}

func validate_reward_management(supply0: Supply, supply1: Supply, D: Int) -> Bool {
    config = Config::find_ref();
    Dmgmt = supply0.calc_management_fee_dilution();

    D <= Dmgmt
    && D >= 0
    && supply1.management_fee_timestamp == supply0.management_fee_timestamp + config.fees.management_fee.period
    && supply0.management_fee_timestamp < tx.time_range.start
    && supply1.management_fee_timestamp < tx.time_range.end
    && supply1.n_vouchers == supply0.n_vouchers
    && supply1.last_voucher_id == supply0.last_voucher_id
    && supply1.n_lovelace == supply0.n_lovelace
    && supply1.success_fee == supply0.success_fee
    && Tokens::minted_only_dvp_tokens()
    && Vault::nothing_spent() // also assures that no asset groups are spent
}

func validate_mint_user_tokens(supply0: Supply, supply1: Supply, D: Int, ptrs: AssetPtrs) -> Bool {
    price = Price::find_ref();
    config = Config::find_ref();
    dV = Vault::diff_lovelace(ptrs.asset_input_ptrs);

    price_relative_to_benchmark = price.relative_to_benchmark();
    // validate_minted_vouchers() also asserts no other token types are minted
    (n_vouchers_minted, n_tokens_in_vouchers, last_voucher_id) = validate_minted_vouchers(
        price_relative_to_benchmark, 
        supply0.period_id(),
        supply0.last_voucher_id,
        supply0.is_successful(price_relative_to_benchmark)
    );

    price.is_not_expired().trace_if_false("price expired")
    && (dV >= (price.value * D).floor()).trace_if_false("too little value sent to vault")
    && (supply1.n_tokens <= config.token.max_supply).trace_if_false("exceeding max supply")
    && (supply1.n_vouchers == supply0.n_vouchers + n_vouchers_minted).trace_if_false("unexpected new voucher count")
    && (supply1.last_voucher_id == last_voucher_id).trace_if_false("unexpected last voucher id")
    && (supply1.management_fee_timestamp == supply0.management_fee_timestamp).trace_if_false("management fee timestamp changed")
    && (supply1.success_fee == supply0.success_fee).trace_if_false("success fee changed")
    && (n_tokens_in_vouchers <= D).trace_if_false("too many tokens mentioned in all vouchers combined")
    && Vault::counters_are_consistent(
        supply1.n_lovelace - supply0.n_lovelace,
        ptrs.asset_group_output_ptrs
    ).trace_if_false("counters aren't consistent")
}

func validate_burn_user_tokens(supply0: Supply, supply1: Supply, D: Int, ptrs: AssetPtrs) -> Bool {
    price = Price::find_ref();
    dV = Vault::diff_lovelace(ptrs.asset_input_ptrs);

    n_vouchers_burned = validate_burned_vouchers(
        supply0.period_id()
    );

    price.is_not_expired()
    && dV >= (price.value * D).floor() // this is all negative
    && supply1.n_vouchers == supply0.n_vouchers - n_vouchers_burned
    && supply1.last_voucher_id == supply0.last_voucher_id
    && supply1.management_fee_timestamp == supply0.management_fee_timestamp
    && supply1.success_fee == supply0.success_fee
    && Vault::counters_are_consistent(
        supply1.n_lovelace - supply0.n_lovelace,
        ptrs.asset_group_output_ptrs
    )
}

func validate_swap(supply0: Supply, supply1: Supply, ptrs: AssetPtrs) -> Bool {
    dV = Vault::diff_lovelace(ptrs.asset_input_ptrs);

    dV >= 0
    && supply1.n_vouchers == supply0.n_vouchers
    && supply1.last_voucher_id == supply0.last_voucher_id
    && supply1.management_fee_timestamp == supply0.management_fee_timestamp
    && supply1.success_fee == supply0.success_fee
    && Tokens::nothing_minted()
    && Vault::counters_are_consistent(
        supply1.n_lovelace - supply0.n_lovelace,
        ptrs.asset_group_output_ptrs
    )
}

func main(_: Supply, ptrs: AssetPtrs) -> Bool {
    // supply0 is taken from Supply::find_thread() instead of from the current datum because this function performs more validity checks
    (supply0, supply1) = Supply::find_thread();
    tokens_minted = Tokens::get_minted();

    D = tokens_minted.get_safe(TokenNames::dvp_token).switch{
        Some{n} => n,
        else => 0
    };

    signed_by_agent()
    && supply1.tick == supply0.tick + 1
    && supply1.n_tokens == supply0.n_tokens + D
    && tx.time_range.end - tx.time_range.start < Duration::DAY
    && if (tx.time_range.end > supply0.period_end()) {
        validate_reward_success(supply0, supply1, D)
    } else if (supply0.management_fee_timestamp + Config::find_ref().fees.management_fee.period < tx.time_range.end) {
        validate_reward_management(supply0, supply1, D)
    } else if (D > 0) {
        validate_mint_user_tokens(supply0, supply1, D, ptrs)
    } else if (D < 0) {
        validate_burn_user_tokens(supply0, supply1, D, ptrs)
    } else {
        validate_swap(supply0, supply1, ptrs)
    }
}